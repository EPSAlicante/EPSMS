---
# Configuracion del munin-node 

- name: Getting Path Data from node
  action: path_facts
  register: pathFacts
  changed_when: False
  ignore_errors: yes
  when: path is not defined

- name: Find service binary
  shell: ((({{ path.service }} --version || {{ path.service }} --help || {{ path.service }}) >/dev/null && echo "True") || echo "False") 2>/dev/null
  register: checkService
  changed_when: False
  ignore_errors: yes

- name: Find systemctl binary
  shell: ((({{ path.systemctl }} --version || {{ path.systemctl }} --help || {{ path.systemctl }}) >/dev/null && echo "True") || echo "False") 2>/dev/null
  register: checkSystemctl
  changed_when: False
  ignore_errors: yes

- name: Get typeOS
  shell: '{{ path.uname }} -s 2>/dev/null'
  register: typeOS
  changed_when: False
  ignore_errors: yes

- name: Getting Base Data from nodes
  action: base_facts
  register: baseFactsMuninNode
  changed_when: False
  ignore_errors: yes
  when: packageManager is not defined

- name: Base Data
  debug: msg=""
  with_items:
    - "Package Manager: '{{ packageManager|default(\"\") }}'"
    - "Packages List (Munin-node): {{ packageMuninNode|default(\"\") }}"
    - "Configuration File (Munin-node): '{{ confFileMuninNode|default(\"\") }}'"
    - "Daemon (Munin-node): '{{ daemonMuninNode|default(\"\") }}'"
  ignore_errors: yes

- name: Be sure munin-node is installed (apt)
  shell: DEBIAN_FRONTEND=noninteractive {{ path['apt-get'] }} -y --force-yes install {{ item }}
  with_items: "{{ packageMuninNode }}"
  ignore_errors: yes
  when: packageManager|default("") == "apt" and packageMuninNode != [] 

- name: Be sure munin-node is installed (conary)
  shell: 'out=`{{ path.conary }} update --resolve {{ item }} 2>&1`; ret=$?; echo "$out"; [ $ret -eq 0 ] || echo "$out"|{{ path.grep }} -iq "no new troves were found" executable={{ path.bash }}'
  with_items: "{{ packageMuninNode }}"
  register: conaryOutput
  changed_when: conaryOutput.stdout != "no new troves were found"
  ignore_errors: yes
  when: packageManager|default("") == "conary" and packageMuninNode != [] 

- name: Be sure munin-node is installed (emerge)
  shell: '({{ path.equery }} -q list {{ item }} >/dev/null 2>&1 && echo "Installed") || {{ path.emerge }} {{ item }} executable={{ path.bash }}' 
  with_items: "{{ packageMuninNode }}"
  ignore_errors: yes
  when: packageManager|default("") == "emerge" and packageMuninNode != [] 

- name: Be sure munin-node is installed (freebsd_pkg)
  shell: 'out=`{{ path.pkg_add }} -r {{ item }} 2>&1`; ret=$?; echo "$out"; [ $ret -eq 0 ] || echo "$out"|{{ path.grep }} -iq "already installed" executable={{ path.bash }}'
  with_items: "{{ packageMuninNode }}"
  register: freebsdOutput
  changed_when: freebsdOutput.stdout != "already installed"
  ignore_errors: yes
  when: packageManager|default("") == "freebsd_pkg" and packageMuninNode != [] 

- name: Be sure munin-node is installed (macports)
  macports: name={{ item }} state=present
  with_items: "{{ packageMuninNode }}"
  ignore_errors: yes
  when: packageManager|default("") == "macports" and packageMuninNode != [] 

- name: Be sure munin-node is installed (openbsd_pkg)
  openbsd_pkg: name={{ item }} state=present
  with_items: "{{ packageMuninNode }}"
  ignore_errors: yes
  when: packageManager|default("") == "openbsd_pkg" and packageMuninNode != []

- name: Be sure munin-node is installed (pacman)
  pacman: name={{ item }} state=present update_cache=yes
  with_items: "{{ packageMuninNode }}"
  ignore_errors: yes
  when: packageManager|default("") == "pacman" and packageMuninNode != [] 

- name: Be sure munin-node is installed (pkgutil)
  pkgutil: name={{ item }} state=present
  with_items: "{{ packageMuninNode }}"
  ignore_errors: yes
  when: packageManager|default("") == "pkgutil" and packageMuninNode != [] 

- name: Be sure munin-node is installed (yum)
  yum: pkg={{ item }} enablerepo={{ labelEpel }} state=installed
  with_items: "{{ packageMuninNode }}"
  ignore_errors: yes
  when: packageManager|default("") == "yum" and packageMuninNode != [] 

- name: Be sure munin-node is installed (zypper)
  zypper: name={{ item }} state=present
  with_items: "{{ packageMuninNode }}"
  ignore_errors: yes
  when: packageManager|default("") == "zypper" and packageMuninNode != [] 

- name: Getting Base Data from nodes again to get Munin-Node configuration
  action: base_facts
  register: baseFactsMuninNodeAgain
  changed_when: False
  ignore_errors: yes
  when: packageManager|default("") != "" and packageMuninNode != [] and base_facts|default("false") == "true" and confFileMuninNode|default("") == "" 

- name: Base Data (again)
  debug: msg=""
  with_items:
    - "Package Manager: '{{ packageManager|default(\"\") }}'"
    - "Packages List (Munin-node): {{ packageMuninNode|default(\"\") }}"
    - "Configuration File (Munin-node): '{{ confFileMuninNode|default(\"\") }}'"
    - "Daemon (Munin-node): '{{ daemonMuninNode|default(\"\") }}'"
  ignore_errors: yes
  when: not baseFactsMuninNodeAgain|skipped

- name: Check munin-node.conf file
  shell: test -w {{ confFileMuninNode }}
  register: checkMuninNode
  changed_when: False
  ignore_errors: yes
  when: confFileMuninNode|default("") != ""

- name: Configure /etc/rc.conf (BSD)
  lineinfile: name=/etc/rc.conf state=present regexp="^munin_node_enable=\"YES\"" line="munin_node_enable=\"YES\""
  register: rcConf
  ignore_errors: yes
  when: confFileMuninNode|default("") != "" and checkMuninNode|success and typeOS.stdout.endswith('BSD')

- name: Get service munin-node in xinetd
  shell: ({{ path.find }} -L /etc/xinetd.d -name '*munin*node*'|head -1) 2>/dev/null executable={{ path.bash }}
  register: xinetdMuninNode 
  changed_when: False
  ignore_errors: yes
  when: confFileMuninNode|default("") != "" and checkMuninNode|success and daemonMuninNode|default("") == "xinetd"

- name: Config munin-node in xinetd (user)
  shell: ((userName=$(cat /etc/passwd|cut -d':' -f1|{{ path.grep }} -e munin|head -1) && [ -n "$userName" ]) && ((({{ path.grep }} 'user' {{ xinetdMuninNode.stdout }} |{{ path.grep }} $'^[ \t]*user'|{{ path.grep }} -v $userName >/dev/null 2>/dev/null) && ({{ path.sed }} -i "s@$({{ path.grep }} 'user' {{ xinetdMuninNode.stdout }} |{{ path.grep }} $'^[ \t]*user'|{{ path.grep }} -v $userName|head -1)@$({{ path.grep }} 'user' {{ xinetdMuninNode.stdout }}|{{ path.grep }} $'^[ \t]*user'|{{ path.grep }} -v $userName|head -1|cut -d'=' -f1)= $userName@g" {{ xinetdMuninNode.stdout }})) || (! ({{ path.grep }} 'user' {{ xinetdMuninNode.stdout }}|{{ path.grep }} $'^[ \t]*user' >/dev/null 2>/dev/null) && ({{ path.sed }} -i "s@}@\tuser \t\t= $userName\n}@" {{ xinetdMuninNode.stdout }}))) && echo "Changed") || echo "No" executable={{ path.bash }}
  register: userXinetdMuninNode
  changed_when: userXinetdMuninNode.stdout == "Changed"
  ignore_errors: yes
  when: confFileMuniNode|default("") != "" and checkMuninNode|success and daemonMuninNode|default("") == "xinetd" and xinetdMuninNode.stdout|default("") != ""

- name: Config munin-node in xinetd (group)
  shell: ((groupName=$(cat /etc/group|cut -d':' -f1|{{ path.grep }} -e munin|head -1) && [ -n "$groupName" ]) && ((({{ path.grep }} 'group' {{ xinetdMuninNode.stdout }} |{{ path.grep }} $'^[ \t]*group'|{{ path.grep }} -v $groupName >/dev/null 2>/dev/null) && ({{ path.sed }} -i "s@$({{ path.grep }} 'group' {{ xinetdMuninNode.stdout }} |{{ path.grep }} $'^[ \t]*group'|{{ path.grep }} -v $groupName|head -1)@$({{ path.grep }} 'group' {{ xinetdMuninNode.stdout }}|{{ path.grep }} $'^[ \t]*group'|{{ path.grep }} -v $groupName|head -1|cut -d'=' -f1)= $groupName@g" {{ xinetdMuninNode.stdout }})) || (! ({{ path.grep }} 'group' {{ xinetdMuninNode.stdout }}|{{ path.grep }} $'^[ \t]*group' >/dev/null 2>/dev/null) && ({{ path.sed }} -i "s@}@\tgroup \t\t= $groupName\n}@" {{ xinetdMuninNode.stdout }}))) && echo "Changed") || echo "No" executable={{ path.bash }}
  register: groupXinetdMuninNode
  changed_when: groupXinetdMuninNode.stdout == "Changed"
  ignore_errors: yes
  when: confFileMuniNode|default("") != "" and checkMuninNode|success and daemonMuninNode|default("") == "xinetd" and xinetdMuninNode.stdout|default("") != ""

- name: Config munin-node in xinetd (only_from)
  shell: (((({{ path.grep }} 'only_from' {{ xinetdMuninNode.stdout }} |{{ path.grep }} $'^[ \t]*only_from'|{{ path.grep }} -v {{ hostMunin }} >/dev/null 2>/dev/null) && ({{ path.sed }} -i "s@$({{ path.grep }} 'only_from' {{ xinetdMuninNode.stdout }}|{{ path.grep }} $'^[ \t]*only_from'|{{ path.grep }} -v {{ hostMunin }}|head -1)@$({{ path.grep }} 'only_from' {{ xinetdMuninNode.stdout }}|{{ path.grep }} $'^[ \t]*only_from'|{{ path.grep }} -v {{ hostMunin }}|head -1) {{ hostMunin }}@g" {{ xinetdMuninNode.stdout }})) || (! ({{ path.grep }} 'only_from' {{ xinetdMuninNode.stdout }}|{{ path.grep }} $'^[ \t]*only_from' >/dev/null 2>/dev/null) && ({{ path.sed }} -i 's/}/\tonly_from \t\t= {{ hostMunin }}\n}/' {{ xinetdMuninNode.stdout }}))) && echo "Changed") || echo "No" executable={{ path.bash }}
  register: onlyFromXinetdMuninNode
  changed_when: onlyFromXinetdMuninNode.stdout == "Changed"
  ignore_errors: yes
  when: confFileMuniNode|default("") != "" and checkMuninNode|success and daemonMuninNode|default("") == "xinetd" and xinetdMuninNode.stdout|default("") != ""

- name: Find munin-node-configure
  shell: ((which munin-node-configure >/dev/null && which munin-node-configure) || (whereis -b munin-node-configure|cut -d' ' -f1,2|cut -d' ' -f2|{{ path.grep }} -v '^munin-node-configure:') || ({{ path.find }} /bin /sbin /usr/bin /usr/sbin /usr/gnu/bin /usr/gnu/sbin /opt/csw/bin /opt/csw/sbin -name 'munin-node-configure'|head -1) || (echo 'munin-node-configure')) 2>/dev/null executable={{ path.bash }}
  register: muninNodeConfigure
  changed_when: False
  ignore_errors: yes
  when: confFileMuninNode|default("") != "" and checkMuninNode|success

- name: Execute munin-node-configure
  shell: ( muninPath=`echo "{{ confFileMuninNode }}" | {{ path.sed }} -e 's/[^/]*$//'`; ( [ `ls -1 $muninPath/plugins|wc -l` -gt 0 ] && echo "No" ) || ( `{{ muninNodeConfigure.stdout|default('munin-node-configure') }} >/dev/null`; [ $? -eq 0 ] && ( echo "Changed "; {{ muninNodeConfigure.stdout|default('munin-node-configure') }} --shell|sh ) ) ) 2>/dev/null executable={{ path.bash }}
  register: pluginsConf
  changed_when: pluginsConf.stdout.startswith('Changed')
  ignore_errors: yes
  when: confFileMuninNode|default("") != "" and checkMuninNode|success

- name: Configure munin-node.conf file with 'host_name localhost.localdomain'
  lineinfile: name={{ confFileMuninNode }} state=present regexp="^#?host_name localhost.localdomain" line='host_name localhost.localdomain'
  register: hostnameFile
  ignore_errors: yes
  when: confFileMuninNode|default("") != "" and checkMuninNode|success

- name: Convert IP munin master in munin-node format
  shell: echo "{{ hostMunin }}"|{{ path.sed }} 's/\./\\\./g' executable={{ path.bash }}
  register: allowMunin
  changed_when: False
  ignore_errors: yes
  when: confFileMuninNode|default("") != "" and checkMuninNode|success

- name: Convert IP munin master in regexp format
  shell: echo "{{ hostMunin }}"|{{ path.sed }} 's/\./\.\./g' executable={{ path.bash }}
  register: regexpMunin
  changed_when: False
  ignore_errors: yes
  when: confFileMuninNode|default("") != "" and checkMuninNode|success

- name: Configure munin-node.conf file with allow 
  lineinfile: name={{ confFileMuninNode }} state=present regexp="^allow .{{ regexpMunin.stdout }}.$" line='allow ^{{ allowMunin.stdout }}$'
  register: allowFile
  ignore_errors: yes
  when: confFileMuninNode|default("") != "" and checkMuninNode|success

- name: Copy node (address) to /etc/munin/munin-conf.d
  template: src=etc/munin/munin-conf.d/node.j2 dest=/etc/munin/munin-conf.d/{{ ansible_hostname }} owner=root group=root mode=0644
  delegate_to: "{{ hostMunin }}"
  ignore_errors: yes
  when: confFileMuninNode|default("") != "" and checkMuninNode|success

- name: Getting Service Name
  shell: ( echo "{{ daemonMuninNode }}"|{{ path.sed }} 's/.*\///' ) 2>/dev/null executable={{ path.bash }}
  register: serviceName
  changed_when: False
  ignore_errors: yes
  when: daemonMuninNode|default("") != "" and not daemonMuninNode.startswith('svc:')

- name: Getting Open Port
  shell: (((((echo {{ typeOS.stdout }}|grep -i 'BSD$') && ({{ path.netstat }} -an -p tcp|{{ path.grep }} tcp |{{ path.grep }} -v 'ESTABLISHED'|tr -s ' '|cut -d' ' -f4|{{ path.sed }} 's/^.*\\.//g'|{{ path.grep }} '4949')) || ((echo {{ typeOS.stdout }}|{{ path.grep }} -i '^SunOS$') && ({{ path.netstat }} -an -f inet -f inet6 -P tcp|tr '\t' ' '|tr -s ' '|{{ path.grep }} -i 'LISTEN'|{{ path.sed }} 's/^ *//g'|cut -d' ' -f1|{{ path.sed }} 's/^.*\\././g'|cut -d'.' -f2|cut -d' ' -f1|{{ path.grep }} '^[0-9]'|{{ path.grep }} '4949')) || ((echo {{ typeOS.stdout }}|{{ path.grep }} -iv 'BSD$'|{{ path.grep }} -iv '^SunOS$') && ({{ path.netstat }} -tln|{{ path.grep }} 'tcp'|{{ path.awk }} '{gsub(".*:","",$4);print $4}'|{{ path.grep }} '4949'))) >/dev/null && (echo 'open')) || (echo '')) 2>/dev/null executable={{ path.bash }}
  register: portMuninNode
  changed_when: False
  ignore_errors: yes
  when: daemonMuninNode|default("") != ""

- name: restart munin-node service 
  service: name={{ serviceName.stdout }} state=restarted enabled=yes
  ignore_errors: yes
  when: checkService.stdout == "True" and confFileMuninNode|default("") != "" and checkMuninNode|success and serviceName.stdout|default("") != "" and (not daemonMuninNode.startswith('svc:')) and (hostnameFile|changed or allowFile|changed or rcConf|changed or pluginsConf|changed or portMuninNode.stdout|default("open") != "open" or (daemonMuninNode|default("") == "xinetd" and (userXinetdMuninNode|changed or groupXinetdMuninNode|changed or onlyFromXinetdMuninNode|changed)))

- name: restart munin-node daemon with systemctl 
  shell: '{{ path.systemctl }} restart {{ serviceName.stdout }}'
  ignore_errors: yes
  when: checkSystemctl.stdout == "True" and confFileMuninNode|default("") != "" and checkMuninNode|success and serviceName.stdout|default("") != "" and (not daemonMuninNode.startswith('svc:')) and (hostnameFile|changed or allowFile|changed or rcConf|changed or pluginsConf|changed or portMuninNode.stdout|default("open") != "open" or (daemonMuninNode|default("") == "xinetd" and (userXinetdMuninNode|changed or groupXinetdMuninNode|changed or onlyFromXinetdMuninNode|changed)))

- name: Restart munin-node daemon
  shell: '{{ daemonMuninNode }} restart'
  ignore_errors: yes
  when: checkService.stdout != "True" and checkSystemctl.stdout != "True" and confFileMuninNode|default("") != "" and checkMuninNode|success and daemonMuninNode|default("") != "" and (not daemonMuninNode.startswith('svc:')) and (hostnameFile|changed or allowFile|changed or rcConf|changed or pluginsConf|changed or portMuninNode.stdout|default("open") != "open" or (daemonMuninNode|default("") == "xinetd" and (userXinetdMuninNode|changed or groupXinetdMuninNode|changed or onlyFromXinetdMuninNode|changed)))

- name: Restart munin-node daemon with SMF (Solaris)
  shell: '{{ path.svcadm }} restart {{ daemonMuninNode }}'
  ignore_errors: yes
  when: confFileMuninNode|default("") != "" and checkMuninNode|success and daemonMuninNode.startswith('svc:') and (hostnameFile|changed or allowFile|changed or rcConf|changed or pluginsConf|changed or portMuninNode.stdout|default("open") != "open" or (daemonMuninNode|default("") == "xinetd" and (userXinetdMuninNode|changed or groupXinetdMuninNode|changed or onlyFromXinetdMuninNode|changed)))

