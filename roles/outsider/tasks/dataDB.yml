---
# Getting data from outsiders 

- name: Make a temp file with subnets to scan
  template: src=tmp/net_facts_subnets.tmp dest=/tmp/net_facts_subnets.tmp owner=root group=root mode=0644

- name: Make a temp file with excluded IPs 
  template: src=tmp/net_facts_exclude.tmp dest=/tmp/net_facts_exclude.tmp owner=root group=root mode=0644

- name: Getting outsiders 
  action: net_facts

- name: Get PID
  shell: echo "$$" executable=/bin/bash
  register: PID

- name: Remove temp file with subnets
  file: path=/tmp/net_facts_subnets.tmp state=absent 

- name: Remove temp file with excluded
  file: path=/tmp/net_facts_exclude.tmp state=absent

- name: Create outsiders directory (inside inventory)
  file: path={{ pathInventoryDirectory }}/outsiders owner=root group=root state=directory
  delegate_to: "{{ hostMysql }}"

- name: Generate sql basic file for Outsider (in Mysql Server)
  template: src=root/inventory/outsiders/out_basic.sql.j2 dest={{ pathInventoryDirectory }}/outsiders/{{ item.name }}_basic.{{ PID.stdout }}.sql owner=root group=root mode=0640
  with_items: "{{ network }}"
  delegate_to: "{{ hostMysql }}"

- name: Generate sql file for tcp ports of Outsider (in Mysql Server)
  template: src=root/inventory/outsiders/out_dataPorts.sql.j2 dest={{ pathInventoryDirectory }}/outsiders/{{ item.name }}_dataPorts.{{ PID.stdout }}.sql owner=root group=root mode=0640
  with_items: "{{ network }}"
  delegate_to: "{{ hostMysql }}"

- name: Generate sql ending file for POST-Outsiders (in Mysql Server)
  template: src=root/inventory/outsiders/POST_ending.sql.j2 dest={{ pathInventoryDirectory }}/outsiders/POST_ending.{{ PID.stdout }}.sql owner=root group=root mode=0640
  delegate_to: "{{ hostMysql }}"

- name: Generate script out.py (in Mysql Server)
  template: src=root/inventory/outsiders/out.py.j2 dest={{ pathInventoryDirectory }}/outsiders/out.py owner=root group=root mode=0750 
  delegate_to: "{{ hostMysql }}"

- name: Get timeStamp
  shell: echo $(date "+%Y-%m-%d %H:%M:%S") executable=/bin/bash
  register: timeStamp
  delegate_to: "{{ hostMysql }}"
 
#- name: Execute script out.py (in Mysql Server) PRE-outsiders
#  shell: '{{ pathInventoryDirectory }}/outsiders/out.py PRE > /dev/null 2> /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp; [ -s /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp ] && (echo "### ERROR outsiders - out.py PRE - $(date) ###" >> /var/log/ansible/mysql-errors.log; cat /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp >> /var/log/ansible/mysql-errors.log); rm -f /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp executable=/bin/bash'
#  delegate_to: "{{ hostMysql }}"

- name: Execute script out.py (in Mysql Server) for every outsider
  shell: '{{ pathInventoryDirectory }}/outsiders/out.py {{ item.name }} "{{ PID.stdout }}" > /dev/null 2> /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp; [ -s /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp ] && (echo "### ERROR outsiders - out.py {{ item.name }} {{ PID.stdout }} - $(date) ###" >> /var/log/ansible/mysql-errors.log; cat /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp >> /var/log/ansible/mysql-errors.log); rm -f /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp executable=/bin/bash'
  with_items: "{{ network }}"
  delegate_to: "{{ hostMysql }}"

- name: Execute script out.py (in Mysql Server) POST-outsiders
  shell: '{{ pathInventoryDirectory }}/outsiders/out.py POST "{{ PID.stdout }}" "{{ timeStamp.stdout }}" > /dev/null 2> /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp; [ -s /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp ] && (echo "### ERROR outsiders - out.py POST {{ PID.stdout }} {{ timeStamp.stdout }} - $(date) ###" >> /var/log/ansible/mysql-errors.log; cat /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp >> /var/log/ansible/mysql-errors.log); rm -f /var/log/ansible/.out_{{ PID.stdout }}-mysql-errors.tmp executable=/bin/bash'
  delegate_to: "{{ hostMysql }}"

- name: Add nodes to inventory
  template: src=etc/ansible/inventory/nodes.j2 dest={{ pathAnsible }}/inventory/nodes owner=root group=root mode=640
 
- name: Add Windows nodes to inventory
  template: src=etc/ansible/inventory/winNodes.j2 dest={{ pathAnsible }}/inventory/winNodes owner=root group=root mode=640

- name: Add outsiders to inventory
  template: src=etc/ansible/inventory/outsiders.j2 dest={{ pathAnsible }}/inventory/outsiders owner=root group=root mode=640

- name: Getting Last 100 changes in host (node or outsider) (in Mysql Server)
  action: db_facts hostMysql="{{ hostMysql }}" and passwd="{{ passwdMysqlInventory }}" label="{{ item.name }}-last" query="Select Init as Date, End, Checked, Node from Server where Binary Name='{{ item.name|lower }}' and Auto order by Init desc limit 100"
  with_items: "{{ network }}"
  delegate_to: "{{ hostMysql }}"

- name: Getting Openvas Data (in Mysql Server)
  action: db_facts hostMysql="{{ hostMysql }}" and passwd="{{ passwdMysqlInventory }}" label="{{ item.name }}-openvas" query="Select StartScan as Date, CVSS, Severity, TotalHigh, TotalMedium, TotalLow, TotalLog, TotalFalsePositive, DATE_FORMAT(StartScan, '%y%m%d%H%i%s') as DateString from OpenvasHost where Binary Server='{{ item.name|lower }}' and Auto order by StartScan desc limit 100"
  with_items: "{{ network }}"
  delegate_to: "{{ hostMysql }}"

- name: Getting historical servers (in Mysql Server)
  action: db_facts hostMysql="{{ hostMysql }}" and passwd="{{ passwdMysqlInventory }}" label="servers-hist" query="select Name, MAX(End) as Date from Server where End is not null and Auto and Name NOT IN (Select Name from Server where End is null) group by Name order by Name;"
  delegate_to: "{{ hostMysql }}"

- name: Getting Munin information about hosts (in Munin Server)
  shell: ((cd /var/lib/munin/{{ ansible_domain }} && find ./|grep -i "./{{ item.name }}-"|head -1|cut -d'/' -f2|cut -d'-' -f1) || echo "No") 2>/dev/null executable=/bin/bash 
  with_items: "{{ network }}"
  register: muninName
  ignore_errors: yes  
  delegate_to: "{{ hostMunin }}"

- name: Copy servers pages (in Wiki Server)
  template: src=var/lib/dokuwiki/data/pages/inventory/{{ item }}.txt.j2 dest=/var/lib/dokuwiki/data/pages/inventory/.{{ item }}.txt.tmp owner=root group=root mode=0644
  with_items:
    - servers
    - servers-nodes
    - servers-winnodes
    - servers-outsiders
    - servers-hist
  delegate_to: "{{ hostWeb }}"

- name: Commit changes of servers pages & update (in Wiki Server)
  shell: (/usr/bin/php /usr/share/dokuwiki/bin/dwpage.php -m "Ansible check at $(date '+%Y-%m-%d %H:%M:%S')" commit /var/lib/dokuwiki/data/pages/inventory/.{{ item }}.txt.tmp inventory:{{ item }}) || (/usr/bin/php /usr/share/dokuwiki/bin/dwpage.php commit -m "Ansible check at $(date '+%Y-%m-%d %H:%M:%S')" /var/lib/dokuwiki/data/pages/inventory/.{{ item }}.txt.tmp inventory:{{ item }})
  with_items:
    - servers
    - servers-nodes
    - servers-winnodes
    - servers-outsiders
    - servers-hist
  delegate_to: "{{ hostWeb }}"

- name: Get userApache in Web Server
  shell: stat -c "%U" /var/lib/dokuwiki/data executable=/bin/bash
  register: userApacheServer
  delegate_to: "{{ hostWeb }}"

- name: Change owner of /var/lib/dokuwiki/data to userApache
  shell: chown -R {{ userApacheServer.stdout }} /var/lib/dokuwiki/data executable=/bin/bash
  delegate_to: "{{ hostWeb }}"

- name: Copy host-portsext.txt (in Wiki Master)
  template: src=var/lib/dokuwiki/data/pages/inventory/host-portsext.txt.j2 dest=/var/lib/dokuwiki/data/pages/inventory/.{{ item.name|lower }}-portsext.txt.tmp owner=root group=root mode=0644
  with_items: "{{ network }}"
  delegate_to: "{{ hostWeb }}"

- name: Commit changes of host-portsext.txt & update (in Wiki Server)
  shell: (/usr/bin/php /usr/share/dokuwiki/bin/dwpage.php -m "Ansible check at $(date '+%Y-%m-%d %H:%M:%S')" commit /var/lib/dokuwiki/data/pages/inventory/.{{ item.name|lower }}-portsext.txt.tmp inventory:{{ item.name|lower }}-portsext) || (/usr/bin/php /usr/share/dokuwiki/bin/dwpage.php commit -m "Ansible check at $(date '+%Y-%m-%d %H:%M:%S')" /var/lib/dokuwiki/data/pages/inventory/.{{ item.name|lower }}-portsext.txt.tmp inventory:{{ item.name|lower }}-portsext)
  with_items: "{{ network }}"
  delegate_to: "{{ hostWeb }}"

- name: Copy host-hostslast.txt (in Wiki Master)
  template: src=var/lib/dokuwiki/data/pages/inventory/host-hostslast.txt.j2 dest=/var/lib/dokuwiki/data/pages/inventory/.{{ item.name|lower }}-hostslast.txt.tmp owner=root group=root mode=0644
  with_items: "{{ network }}"
  delegate_to: "{{ hostWeb }}"

- name: Commit changes of host-hostslast.txt & update (in Wiki Server)
  shell: (/usr/bin/php /usr/share/dokuwiki/bin/dwpage.php -m "Ansible check at $(date '+%Y-%m-%d %H:%M:%S')" commit /var/lib/dokuwiki/data/pages/inventory/.{{ item.name|lower }}-hostslast.txt.tmp inventory:{{ item.name|lower }}-hostslast) || (/usr/bin/php /usr/share/dokuwiki/bin/dwpage.php commit -m "Ansible check at $(date '+%Y-%m-%d %H:%M:%S')" /var/lib/dokuwiki/data/pages/inventory/.{{ item.name|lower }}-hostslast.txt.tmp inventory:{{ item.name|lower }}-hostslast)
  with_items: "{{ network }}"
  delegate_to: "{{ hostWeb }}"

- name: Copy host-openvas.txt (in Wiki Master)
  template: src=var/lib/dokuwiki/data/pages/inventory/host-openvas.txt.j2 dest=/var/lib/dokuwiki/data/pages/inventory/.{{ item.name|lower }}-openvas.txt.tmp owner=root group=root mode=0644
  with_items: "{{ network }}"
  delegate_to: "{{ hostWeb }}"

- name: Commit changes of host-openvas.txt & update (in Wiki Server)
  shell: (/usr/bin/php /usr/share/dokuwiki/bin/dwpage.php -m "Ansible check at $(date '+%Y-%m-%d %H:%M:%S')" commit /var/lib/dokuwiki/data/pages/inventory/.{{ item.name|lower }}-openvas.txt.tmp inventory:{{ item.name|lower }}-openvas) || (/usr/bin/php /usr/share/dokuwiki/bin/dwpage.php commit -m "Ansible check at $(date '+%Y-%m-%d %H:%M:%S')" /var/lib/dokuwiki/data/pages/inventory/.{{ item.name|lower }}-openvas.txt.tmp inventory:{{ item.name|lower }}-openvas)
  with_items: "{{ network }}"
  delegate_to: "{{ hostWeb }}"

- name: Touch localhost_ansible.cfg file (in Nagios Master)
  shell: touch /etc/nagios3/conf.d/localhost_ansible.cfg
  delegate_to: "{{ hostNagios }}"

- name: Copy out_ansible.cfg to /etc/nagios3/conf.d (in Nagios Master)
  template: src=etc/nagios3/conf.d/out_ansible.cfg.j2 dest=/etc/nagios3/conf.d/{{ item.name }}_ansible.cfg owner=root group=root mode=0644
  with_items: "{{ network }}"
  notify: reload nagios Master
  delegate_to: "{{ hostNagios }}"

- name: Touch out_ansible.cfg files (in Nagios Master)
  shell: touch /etc/nagios3/conf.d/{{ item.name }}_ansible.cfg 
  with_items: "{{ network }}"
  delegate_to: "{{ hostNagios }}"

- name: Copy errorsAnsible_ansible.cfg to /etc/nagios3/conf.d (in Nagios Master)
  template: src=etc/nagios3/conf.d/errorsAnsible_ansible.cfg.j2 dest=/etc/nagios3/conf.d/errorsAnsible_{{ hostnameAnsible }}_ansible.cfg owner=root group=root mode=0644
  notify: reload nagios Master
  delegate_to: "{{ hostNagios }}"

- name: Touch errosAnsible_ansible.cfg file (in Nagios Master)
  shell: touch /etc/nagios3/conf.d/errorsAnsible_{{ hostnameAnsible }}_ansible.cfg 
  delegate_to: "{{ hostNagios }}"

- name: Delete _ansible.cfg files older than localhost_ansible.cfg (in Nagios Master)
  shell: find /etc/nagios3/conf.d/ -name "*_ansible.cfg" ! -name "localhost_ansible.cfg" -type f ! -newer /etc/nagios3/conf.d/localhost_ansible.cfg -delete
  delegate_to: "{{ hostNagios }}"

