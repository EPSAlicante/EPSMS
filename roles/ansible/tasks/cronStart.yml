---
# The source code packaged with this file is Free Software, Copyright (C) 2016 by
# Unidad de Laboratorios, Escuela Politecnica Superior, Universidad de Alicante :: <epsms at eps.ua.es>.
# It's licensed under the AFFERO GENERAL PUBLIC LICENSE unless stated otherwise.
# You can get copies of the licenses here: http://www.affero.org/oagpl.html
# AFFERO GENERAL PUBLIC LICENSE is also included in the file called "LICENSE".


# Crontab Configuration (Add entries) 

- name: Add ansible.yml task to crontab file (hours frequency or fixed time)
  cron: 'name="ansible.yml" minute="{{ cronInstall[3:5] if cronInstall is string else \"0\" }}" hour="{{ cronInstall[0:2] if cronInstall is string else \"*/%s\" % (cronInstall) }}" job="ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/ansible.yml -t install,config,cronStart > /var/log/ansible/.ansible.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR ansible - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.ansible.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.ansible.$timestamp.log.tmp; echo \"### ansible - $ini TO $(date) ###\" >> /var/log/ansible/summary.log; ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/mysql.yml > /var/log/ansible/.mysql.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR mysql - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.mysql.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.mysql.$timestamp.log.tmp; echo \"### mysql - $ini TO $(date) ###\" >> /var/log/ansible/summary.log; ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/web.yml > /var/log/ansible/.web.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR web - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.web.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.web.$timestamp.log.tmp; echo \"### web - $ini TO $(date) ###\" >> /var/log/ansible/summary.log; ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/munin.yml > /var/log/ansible/.munin.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR munin - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.munin.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.munin.$timestamp.log.tmp; echo \"### munin - $ini TO $(date) ###\" >> /var/log/ansible/summary.log; ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/nagios.yml > /var/log/ansible/.nagios.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR nagios - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.nagios.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.nagios.$timestamp.log.tmp; echo \"### nagios - $ini TO $(date) ###\" >> /var/log/ansible/summary.log; ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/grafana.yml > /var/log/ansible/.grafana.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR grafana - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.grafana.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.grafana.$timestamp.log.tmp; echo \"### grafana - $ini TO $(date) ###\" >> /var/log/ansible/summary.log; ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/outsiders.yml -t install > /var/log/ansible/.outsiders-install.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR outsiders install - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.outsiders-install.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.outsiders-install.$timestamp.log.tmp; echo \"### outsiders install - $ini TO $(date) ###\" >> /var/log/ansible/summary.log; ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/openvas.yml -t install,config --skip-tags dataDB > /var/log/ansible/.openvas-install.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR openvas install - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.openvas-install.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.openvas-install.$timestamp.log.tmp; echo \"### openvas install - $ini TO $(date) ###\" >> /var/log/ansible/summary.log; ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/nodes.yml -t install > /var/log/ansible/.nodes-install.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR nodes install - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.nodes-install.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.nodes-install.$timestamp.log.tmp; echo \"### nodes install - $ini TO $(date) ###\" >> /var/log/ansible/summary.log"'

- name: Add outsiders.yml (dataDB) task to crontab file (hours frequency or fixed time)
  cron: 'name="outsiders.yml-dataDB" minute="{{ cronOutsiders[3:5] if cronOutsiders is string else \"0\" }}" hour="{{ cronOutsiders[0:2] if cronOutsiders is string else \"*/%s\" % (cronOutsiders) }}" job="ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/outsiders.yml -t dataDB > /var/log/ansible/.outsiders-dataDB.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR outsiders dataDB - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.outsiders-dataDB.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.outsiders-dataDB.$timestamp.log.tmp; echo \"### outsiders dataDB - $ini TO $(date) ###\" >> /var/log/ansible/summary.log"'

- name: Add openvas.yml (dataDB) task to crontab file (months frequency)
  cron: 'name="openvas.yml-dataDB" minute="{{ minutesCronOpenvas }}" hour="{{ hoursCronOpenvas }}" day="{{ dayCronOpenvas }}" weekday="{{ weekdayCronOpenvas }}" month="*/{{ cronOpenvas }}" job="ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/openvas.yml -t dataDB > /var/log/ansible/.openvas-dataDB.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR openvas dataDB - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.openvas-dataDB.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.openvas-dataDB.$timestamp.log.tmp; echo \"### openvas dataDB - $ini TO $(date) ###\" >> /var/log/ansible/summary.log"'

- name: Create special Openvas Group
  shell:  echo "{\\\"serversList\\\":[{\\\"Name\\\":\\\"{{ specialServersListOpenvas }}\\\"}]}"|sed 's/ /\\"},{\\"Name\\":\\"/g'
  register: specialListOpenvas
  when: specialGroupOpenvas == 'y'

- name: Add openvas.yml (dataDB) task to crontab file (special group) 
  cron: 'name="openvas.yml-dataDB-special" minute="{{ minutesSpecialCronOpenvas }}" hour="{{ hoursSpecialCronOpenvas }}" day="{{ daySpecialCronOpenvas }}" weekday="{{ weekdaySpecialCronOpenvas }}" month="{{ monthSpecialCronOpenvas }}" job="ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/openvas.yml -t dataDB --extra-vars \"{{ specialListOpenvas.stdout }}\" > /var/log/ansible/.openvas-dataDB-special.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR openvas special dataDB - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.openvas-dataDB-special.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.openvas-dataDB-special.$timestamp.log.tmp; echo \"### openvas special dataDB - $ini TO $(date) ###\" >> /var/log/ansible/summary.log"'
  when: specialGroupOpenvas == 'y'

- name: Add openvas.yml (Database Update) task to crontab file 
  cron: 'name="openvas.yml-update" minute="{{ minutesUpdateCronOpenvas }}" hour="{{ hoursUpdateCronOpenvas }}" day="{{ dayUpdateCronOpenvas }}" weekday="{{ weekdayUpdateCronOpenvas }}" month="{{ monthUpdateCronOpenvas }}" job="ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/openvas.yml -t update --skip-tags dataDB > /var/log/ansible/.openvas-update.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR openvas update - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.openvas-update.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.openvas-update.$timestamp.log.tmp; echo \"### openvas update - $ini TO $(date) ###\" >> /var/log/ansible/summary.log"'

- name: Add nodes.yml (dataDB) task to crontab file (hours frequency or fixed time)
  cron: 'name="nodes.yml-dataDB" minute="{{ cronNodes[3:5] if cronNodes is string else \"0\" }}" hour="{{ cronNodes[0:2] if cronNodes is string else \"*/%s\" % (cronNodes) }}" job="ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/nodes.yml -t dataDB > /var/log/ansible/.nodes-dataDB.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR nodes dataDB - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.nodes-dataDB.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.nodes-dataDB.$timestamp.log.tmp; echo \"### nodes dataDB - $ini TO $(date) ###\" >> /var/log/ansible/summary.log"'

- name: Add nodes.yml (dataPackagesDB) task to crontab file (hours frequency or fixed time)
  cron: 'name="nodes.yml-dataPackagesDB" minute="{{ cronNodesPackages[3:5] if cronNodesPackages is string else \"0\" }}" hour="{{ cronNodesPackages[0:2] if cronNodesPackages is string else \"*/%s\" % (cronNodesPackages) }}" job="ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/nodes.yml -t dataPackagesDB > /var/log/ansible/.nodes-dataPackagesDB.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR nodes dataPackagesDB - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.nodes-dataPackagesDB.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.nodes-dataPackagesDB.$timestamp.log.tmp; echo \"### nodes dataPackagesDB - $ini TO $(date) ###\" >> /var/log/ansible/summary.log"'

- name: Add nodes.yml (dataExesDB) task to crontab file (hours frequency or fixed time)
  cron: 'name="nodes.yml-dataExesDB" minute="{{ cronNodesExes[3:5] if cronNodesExes is string else \"0\" }}" hour="{{ cronNodesExes[0:2] if cronNodesExes is string else \"*/%s\" % (cronNodesExes) }}" job="ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/nodes.yml -t dataExesDB -f 1 > /var/log/ansible/.nodes-dataExesDB.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR nodes dataExesDB - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.nodes-dataExesDB.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.nodes-dataExesDB.$timestamp.log.tmp; echo \"### nodes dataExesDB - $ini TO $(date) ###\" >> /var/log/ansible/summary.log;"'

- name: Add winNodes.yml task to crontab file (hours frequency or fixed time)
  cron: 'name="winNodes.yml" minute="{{ winCronNodes[3:5] if winCronNodes is string else \"0\" }}" hour="{{ winCronNodes[0:2] if winCronNodes is string else \"*/%s\" % (winCronNodes) }}" job="ini=$(date); timestamp=$(date +\"\%y\%m\%d-\%H\%M\"); ansible-playbook {{ pathAnsible }}/winNodes.yml > /var/log/ansible/.winNodes.$timestamp.log.tmp 2>&1; [ $? -gt 0 ] && ((echo; echo \"### ERROR winNodes - $ini TO $(date) ###\"; echo; cat /var/log/ansible/.winNodes.$timestamp.log.tmp) >> /var/log/ansible/errors.log); rm -f /var/log/ansible/.winNodes.$timestamp.log.tmp; echo \"### winNodes - $ini TO $(date) ###\" >> /var/log/ansible/summary.log"'
  when: winNodes == "y"

