######################################################
                   Developer Guide 
######################################################


Directory Structure: '/etc/ansible'


    Files:

	
	* 'ansible.cfg' -> Ansible configuration file

	* 'configure.py' -> System configuration python script

	* 'configExtra.py' -> Extra variables configuration python script

	* 'help.py' -> Help menu python script

	* 'menu.py' -> User menu python script


    Playbook files:


	* 'ansible.yml' -> Configuration of Control server (Ansible)

	* 'group_by.yml' -> Auxiliar file used for playbooks to get information about Operating System and Version

	* 'munin.yml' -> Installation and configuration of Munin server

	* 'mysql.yml' -> Installation and configuration of Mysql server

	* 'nagios.yml' -> Installation and configuration of Nagios server

	* 'nodes.yml' -> Installation, configuration and getting information of Nodes (Linux/Unix)

	* 'openvas.yml' -> Scanning of vulnerabilities of hosts (outsiders, winNodes and nodes) with Openvas

	* 'outsiders.yml' -> Scanning and clasifying (nodes and outsiders) of hosts discovered in working subnets 

	* 'web.yml' -> Configuration of Web Server (Apache Server, Dokuwiki Server, REST API, PHP and Angularjs Apps)
 
	* 'winNodes.yml' -> Getting information of Windows Nodes


    Directories:


	* 'config_files/' -> configuration files (variables by default)

	    - 'main.conf' (default values of variables. Updated every configuration with values introduced)

	    - 'extra.conf' (variables not required in configuration)


	* 'group_vars/' -> group variables (required parameters in configuration) 

	    - 'all' (global variables for every host)

	    - 'CentOS-6' (variables for CentOS-6 hosts, overwriting global variables)

	    - 'CentOS-7' (variables for CentOS-7 hosts, overwriting global variables)

	    - 'Debian-6' (variables for Debian-6 hosts, overwriting global variables)

	    - 'Debian-7' (variables for Debian-7 hosts, overwriting global variables)

	    - 'Distribution-Version.template' (template as a example to create a Distribution-Version file)

	    Every file with 'OS-Version' format will have the same function, overwriting global variables


	* 'help/' -> help files

	    Documentation files


	* 'host_vars/' -> host variables

	    - 'node.template' (template a a example to create a hostname file)

	    Every file with a host name will overwrite global variables 


	* 'inventory/' -> inventory files

	    - ansible (Control server's name)
	
	    - munin (Munin server's name)

	    - nagios (Nagios server's name)

	    - nodes (Linux/Unix nodes' names)

	    - outsiders (Outsiders' names)

	    - servers (Servers' names: Control, Munin, Nagios and Web)

	    - web (Web server's name)

	    - winNodes (Windows nodes' names)


	* 'roles/' -> playbooks code by roles

	    - 'ansible/' (Ansible code to install and configure Control server. Called by ansible.yml playbook)

		+ 'files/' (files called by tasks' files to copy to Control server)

		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files) 

		    * 'install.yml' (Installs needed tools: nmap, wmic, etc.)

		    * 'config.yml' (Configures Ansible and prepares python scripts to be used by playbooks)  

		    * 'cronStart.yml' (Adds entries to crontab with all the playbooks) 

		    * 'cronStop.yml' (Deletes all entries about plaubooks from crontab) 


	    - 'apache/' (Ansible code to install and configure Apache Web server. Called by web.yml, munin.yml and nagios.yml playbooks)

		+ 'handlers/' (Daemons' restarts called by tasks' files)
		
		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files) 

		    * 'install.yml' (Installs apache ans needed libraries)

		    * 'openssl.yml' (Installs openssl and creates self-signed certificate)

		    * 'config.yml' (Configure apache with SSL)

		+ 'templates/' (templates called by tasks' files to modify with variables' values and copy to Web server)


	    - 'munin/' (Ansible code to install and configure Munin server. Called by munin.yml playbook)

		+ 'handlers/' (Daemons' restarts called by tasks' files)
		
		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files)

		    * 'install.yml' (Installs munin)

		    * 'config.yml' (Configures munin server)

		+ 'templates/' (templates called by tasks' files to modify with variables' values and copy to Munin server)


	    - 'mysql/' (Ansible code to install and configure Mysql server. Called by mysql.yml playbook)

		+ 'files/' (files called by tasks' files to copy to Mysql server)

		+ 'handlers/' (Daemons' restarts called by tasks' files)
		
		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files)

		    * 'install.yml' (Installs mysql-server)

		    * 'config.yml' (Configures mysql server)

		    * 'createDB.yml' (Creates inventory user and inventory database and tables)

		+ 'templates/' (templates called by tasks' files to modify with variables' values and copy to Mysql server)


	    - 'nagios/' (Ansible code to install and configure Nagios server. Called by nagios.yml playbook)

		+ 'handlers/' (Daemons' restarts called by tasks' files)
		
		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files)

		    * 'install.yml' (Installs nagios)

		    * 'config.yml' (Configures nagios server)

		+ 'templates/' (templates called by tasks' files to modify with variables' values and copy to Nagios server)

	    - 'node/' (Ansible code to get information about nodes. Called by node.yml playbook)

		+ 'files/' (files called by tasks' files to copy to nodes)

		+ 'handlers/' (Daemons' restarts called by tasks' files)
		
		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files)

		    * 'installBase.yml' (Installs needed packages in nodes to get information)

		    * 'munin-node.yml' (Installs and configures munin-node)

		    * 'nagios-nrpe.yml' (Installs and configures nagios-nrpe)

		    * 'dataDB.yml' (Gets basic information from nodes executing site_facts script, updates inventory database, Nagios client and Nagios and Wiki servers)

		    * 'dataExesDB.yml' (Gets executables information from nodes executing site_facts.exes script, updates inventory database and Wiki server)

		    * 'dataPackagesDB.yml' (Gets packages information from nodes executing site_facts.packages script, updates inventory database and Wiki server)

		+ 'templates/' (templates called by tasks' files to modify with variables' values and copy to nodes and Mysql, Nagios, Munin and Wiki servers)


	    - 'openvas/' (Ansible code to scan vulnerabilities of hosts with Openvas software)

		+ 'handlers/' (Daemons' restarts called by tasks' files)

		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files)

		    * 'install.yml' (Install Openvas software)

		    * 'config.yml' (Config Openvas to be ready for sccaning)

		    * 'update.yml' (Update Openvas database)

		    * 'dataDB.yml' (Scans hosts executing 'omp' Openvas client, and get information with openvas_facts scripts, stores inventory database and makes reports available on wiki server in different formats: html, pdf, txt and xml)

		+ 'templates/' (templates called by tasks' files to modify with variables' values and copy to Mysql server)
		

	    - 'outsider/' (Ansible code to scan working subnets to discover and clasify hosts as nodes and outsiders)

		+ 'handlers/' (Daemons' restarts called by tasks' files)
		
		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files)

		    * 'getData.yml' (Installs needed packages for scanning)

		    * 'dataDB.yml' (Scans nodes and outsiders from working subnets executing net_facts script, updates inventory database, Nagios and Wiki servers)

		+ 'templates/' (templates called by tasks' files to modify with variables' values and copy to Control, Mysql, Nagios and Wiki servers)


	    - 'web/' (Ansible code to install and configure Web applications: PHP & Angularjs Apps, REST API and phpMyAdmin. Called by web.yml playbook)

		+ 'files/' (files called by tasks' files to copy to Web server)

		+ 'handlers/' (Daemons' restarts called by tasks' files)
		
		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files)

		    * 'php.yml' (Installs PHP)

		    * 'phpMyAdmin.yml' (Installs and configures phpMyAdmin)

		    * 'config.yml' (Configures Web application and sync pages)

		+ 'templates/' (templates called by tasks' files to modify with variables' values and copy to Web server)


	    - 'wiki/' (Ansible code to install and configure Wiki server. Called by web.yml playbook)

		+ 'files/' (files called by tasks' files to copy to Wiki server)

		+ 'handlers/' (Daemons' restarts called by tasks' files)
		
		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files)

		    * 'install.yml' (Installs dokuwiki)

		    * 'config.yml' (Configures Wiki server)

		+ 'templates/' (templates called by tasks' files to modify with variables' values and copy to Wiki server)


	    - 'winNode/' (Ansible code to get information about windows nodes. Called by winNode.yml playbook)

		+ 'tasks/'

		    * 'main.yml' (Main Yaml file, that calls the rest of Yaml files)

		    * 'dataDB.yml' (Gets information from windows nodes executing win_facts script, updates inventory database and Wiki server)

		+ 'templates/' (templates called by tasks' files to modify with variables' values and copy to Mysql and Wiki servers)


	* 'scripts/' -> scripts needed by playbooks

	    - 'base_facts.py' (Python script to get base information about the node connnected. It contains information about Package Manager and info about munin and nagios client files)

	    - 'checkSO.py' (Python script to check Operating System and Version of a host. It's called with three parameters: hostname or IP address of host to check, remote user to connect and role to check. Depending the role, host need a special OS and Version, and script returns 'OK' if host has correct OS and Version).

	    - 'db_facts.py' (Python script to get information from inventory database and show it in Dokuwiki server. It's called with one parameter: SQL string and returns SQL results in JSON format that playbooks can use)

	    - 'net_facts.py' (Python script to scan and discover hosts in 'working subnets' with 'nmap' tool. It discovers live hosts and scans their open ports. If TCP/22 port is open, will try to connect with 'remote user'. If connection is done, host will be clasified as 'node' and will be 'outsider' in other case)

	    - 'openvas_facts.py' (Python script to get information from hosts about vulnerabilites scanned with Openvas. Get general and detailed information about vulnerabilities)

	    - 'path_facts.py' (Python script to get information about command's path on node connnected)

	    - 'setupLocal.yml' (Yaml script to make python scripts 'path_facts.py' and 'base_facts.py' able to be called from playbooks)

	    - 'setupNode.py' (Python script to transform a host in a 'node'. It's called with two parameters: hostname or IP address of host and 'remote user' to permit access. It has to connect to host as 'root' user and call 'setupNode.yml' to make the transformation. Finally will check the connection to host as 'remote user' to validate host as a 'node')

	    - 'setupNode.yml' (Yaml script to prepare a host to be a 'node', permitting ansible access from 'Control server' with 'remote user' and without password. It creates 'remote user', permits access with no password from 'Control server' using authorized_key, and installs and configures sudo to able 'remote user' executing everything)

	    - 'site_facts.py' (Python script to get basic information from nodes. It get info about software and hardware except packages and executables. It returns information in JSON format that playbooks can use)

	    - 'site_facts.exes.py' (Python script to get executables information from nodes. It returns information in JSON format that playbooks can use)

	    - 'site_facts.packages.py' (Python script to get packages information from nodes. It returns information in JSON format that playbooks can use)

	    - 'win_facts.py' (Python script to get information from windows nodes. It get info about software and hardware except packages and executables. It returns information in JSON format that playbooks can use)



######################################################
