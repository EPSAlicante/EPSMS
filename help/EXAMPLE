######################################################
                      Example 
######################################################


NetWorking Environment:


* Domain: eps.ua.es

* Subnets: 172.16.40.0/24

* Linux/Unix hosts in subnets (to become nodes): 172.16.40.137 (gentootfm.eps.ua.es), 172.16.40.138 (openSusetfm.eps.ua.es), 172.16.40.139 (slackwaretfm.eps.ua.es), 172.16.40.140 (archtfm.eps.ua.es), 172.16.40.141 (openBSDtfm.eps.ua.es), 172.16.40.147 (hosttfm1.eps.ua.es), 172.16.40.216 (freeBSDtfm.eps.ua.es), 172.16.40.217 (ubuntutfm.eps.ua.es), 172.16.40.220 (solaristfm.eps.ua.es), 172.16.40.221 (debiantfm.eps.ua.es), 172.16.40.222 (centostfm.eps.ua.es), 172.16.40.223 (fedoratfm.eps.ua.es)

* Windows hosts in subnets (to become winNodes): 172.16.40.143 (w2008tfm.eps.ua.es), 172.16.40.146 (w2003tfm.eps.ua.es), 172.16.40.218 (w2000tfm.eps.ua.es)



Steps to install, configure and use System:


(1) We need a host (with CentOS 6) to install software. This host will be the Control Server. We want to deploy all infrastructure in the same host, so it will be Mysql Server, Nagios Server, Munin Server, Wiki Server and Web server.

    We install CentOS 6 in: 172.16.40.142 (monitortfm.eps.ua.es)


(2) Copy software (jjzubi.tgz) to Control Server (monitortfm.eps.ua.es). As 'root' user (in Control Server), decompress tgz file. It will show a directory 'jjzubi' with three files: 

    * 'ansible.tgz' -> tgz file with code

    * install.py -> python script to install software

    * INSTALL -> text file with documentation

    Watching 'INSTALL' file we'll know that Control server needs 'python 2.6' installed and 'EPEL' repository.


(3) If we have all software installed, we're going to install software. Just type (as 'root' user): 

    ./install.py 

    Script will all steps done:

    * Operating System and python version will be checked. 

    * If everything is OK 'ansible' software and dependencies will be installed.

    * If 'ansible' installation is OK, '/etc/ansible' directory will be renamed to '/etc/ansible-datetime' and a new '/etc/ansible' directory will be created.

    * Finally 'ansible.tgz' file will be unzipped to '/etc/ansible'

    When script is finished, execute python script '/etc/ansible/menu.py' (Menu's Control) for next steps.


(4) We have installed software, but is not configured yet. So, next step will be configure System. Select option '1. Configure System'.

    First, script checks host (monitortfm.eps.ua.es) to be sure it's a CentOS 6. If everything is OK, it will define 'monitortfm.eps.ua.es' as Control Server

    Now, script will ask some questions to define System's parameters:

    * 'Remote User to connect': 'ansible' -> We select 'ansible' user (a new user) to connect by ssh to nodes. See FAQ(2) for details.

      Control server is a node too. So, script will try to connect as 'root' user to create 'ansible' user, install 'sudo' software, permit execute everythnig for 'ansible' user and copy public key of Control server to 'authorized_key' file of 'ansible' home. This way, 'ansible' can connect to node without password, and execute very command it needs.

      So, we are asked to enter 'root' password of 'monitortfm.eps.ua.es'. We do it, and 'ansible' user is create and configured.

    * 'Working subnets': 172.16.40.0/24 -> Control server 'monitortfm.eps.ua.es' has to be inside 'wotking subnets'. If not, script will show an error.

    * 'IPs to be excluded': 172.16.40.1 172.16.40.11 -> they are our gateway ans a special host we don't want to check.

    * 'Mysql Host': 172.16.40.142 -> We want 'monitortfm.eps.ua.es' to be our Mysql Server.

      Script knows that host is configured as node (we can connect as 'ansible' user), it's a CentOS 6 (as Mysql Server, it has to be CentOS 6) and it's inside working subnets. So, everything is OK.

    * 'Nagios Host': 172.16.40.142 -> We want 'monitortfm.eps.ua.es' to be our Nagios Server.

      Script knows that host is configured as node (we can connect as 'ansible' user), it's a CentOS 6 (as Nagios Server, it has to be CentOS 6) and it's inside working subnets. So, everything is OK.

    * 'Munin Host': 172.16.40.142 -> We want 'monitortfm.eps.ua.es' to be our Munin Server.

      Script knows that host is configured as node (we can connect as 'ansible' user), it's a CentOS 6 (as Munin Server, it has to be CentOS 6) and it's inside working subnets. So, everything is OK.

    * 'Web Host': 172.16.40.142 -> We want 'monitortfm.eps.ua.es' to be our Wiki Server and Web Server. It will install dokuwiki, phpMyAdmin, a REST API and PHP & Angularjs applications).

      Script knows that host is configured as node (we can connect as 'ansible' user), it's a CentOS 6 (as Web server, it has to be CentOS 6) and it's inside working subnets. So, everything is OK.

    * 'Openvas Host': 172.16.40.142 -> We want 'monitortfm.eps.ua.es' to be our Openvas Server.

      Script knows that host is configured as node (we can connect as 'ansible' user), it's a CentOS 6 (as Openvas Server, it has to be CentOS 6) and it's inside working subnets. So, everything is OK.

    * 'Password Openvas user': 'jjzubi' -> Password to connect to Openvas server as Admin user.

    * 'Password Mysql user root': 'jjzubi' -> Password to connect to Mysql Database as 'root' user.

    * 'Password Mysql user inventory': 'jjzubi' -> Password to connect to Mysql Database as 'inventory' user. System we'll use this user to insert and get data from Mysql Database, in 'inventory' database.

    * 'Password Web user admin': 'jjzubi' -> Password to connect as 'admin' Apache user to Nagios, Munin, Wiki, REST API and PHP & Angularjs Applications.

    * 'Hosts administrators': 172.16.40.144 172.16.40.176 -> IPs of Administrator's hosts. They only can access to Servers from these IPs.

    * 'Frequency to check Installed Software or fixed time': 4 -> Every 4 hours System will check that every software is installed and correcty configured for all servers and nodes.

    * 'Frequency to check new hosts in subnets or fixed time': 05:00 -> At 05:00 System will scan 'working subnet' to discover new hosts, and clasify them as 'nodes', 'winNodes' or 'outsiders'.

    * 'Frequency to check vulnerabilities in hosts': 3 -> Every 3 months System will scan all hosts discovered to check vulnerabilities with Openvas.

    * 'Frequency to get Info from Nodes or fixed time': 2 -> Every 2 hours System will get hardware and software basic information from nodes.

    * 'Frequency to get Info Packages from Nodes or fixed time': 12 -> Every 12 hours System will get packages information from nodes.

    * 'Frequency to get Info Executables from Nodes or fixed time': 24 -> Every 24 hours System will get executables information from nodes.

    * 'Do you want to check windows hosts as nodes?': 'y' -> We want to get hardware and software information from winNodes.

    * 'Remote user to connect to Windows nodes': 'ansible' -> We have to create 'ansible' user in windows nodes and permit access to WMI information. See FAQ(3) for details.

    * 'Password Windows User Nodes': 'jjzubi' -> Password to connect as 'ansible' user to winNodes.

    * 'Frequency to get Info from Windows Nodes or fixed time': 2 -> Every 2 hours System will get hardware and software information from winNodes.


(5) Before finish, script will ask to configure hosts as nodes. If we want to configure a host as node, we type the IP or hostame and script will ask for password of 'root' user to connect by ssh and configure. So, we want to configure all of our nodes (gentootfm.eps.ua.es, openSusetfm.eps.ua.es, slackwaretfm.eps.ua.es, archtfm.eps.ua.es, openBSDtfm.eps.ua.es, hosttfm1.eps.ua.es, freeBSDtfm.eps.ua.es, ubuntutfm.eps.ua.es, solaristfm.eps.ua.es, debiantfm.eps.ua.es, centostfm.eps.ua.es, fedoratfm.eps.ua.es). We're going to type hostname and password 'root' for every host.


(6) We want to configure windows hosts (w2008tfm.eps.ua.es, w2003tfm.eps.ua.es, w2000tfm.eps.ua.es) as winNodes, so we create 'ansible' user and permit access to WMI information in all of them. See FAQ(3) for details.


(7) After questions and node's configuration, script will show a summary with all questions and answers to verify them. We confirm that everything is OK, and script continues with deployment of infrastructure, installing and configuring Control Server, Mysql Server, Nagios Server, Munin Server, Wiki Server, Openvas Server and Web Server (deployment can take some time).


(8) When deployment is done, script will start scanning of 172.16.40.0/24 (working subnet) to discover hosts and clasify as nodes, winNodes and outsiders. We have configured all of Linux/Unix hosts as nodes and Windows hosts as winNodes, so scan will clasify: gentootfm.eps.ua.es, openSusetfm.eps.ua.es, slackwaretfm.eps.ua.es, archtfm.eps.ua.es, openBSDtfm.eps.ua.es, hosttfm1.eps.ua.es, freeBSDtfm.eps.ua.es, ubuntutfm.eps.ua.es, solaristfm.eps.ua.es, debiantfm.eps.ua.es, centostfm.eps.ua.es, fedoratfm.eps.ua.es as nodes and clasify: w2008tfm.eps.ua.es, w2003tfm.eps.ua.es, w2000tfm.eps.ua.es as winNodes.


(9) After scanning, script will install and configure software in nodes (Nagios NRPE, Munin node and required tools to get information). Nagios NRPE opens TCP/5666 port and Munin node opens TCP/4949 port. So, we have to permit 'monitortfm.eps.ua.es' (Nagios Server and Munin Serve) to access these ports.


(10) When nodes are installed and correctly configured, script will start getting hardware and software information (everything but packages and executables information) from nodes and winNodes.


(11) Finally script will configure monitortfm.eps.ua.es (Control Server) modifyng 'crontab' to repeat all these jobs (every job will be repeated with a frequency defined at configuration step): 

     * Verifyng software installed and configured in Servers every 4 hours.

     * Scanning working subnets, clasifyng hosts discovered as nodes, winNodes or outsiders every day at 05:00.

     * Verifyng software installed and configured in nodes every 4 hours.

     * Getting hardware ans software basic information from nodes every 2 hours.
 
     * Getting packages information from nodes every 12 hours.

     * Getting executables information from nodes every 24 hours.

     * Getting hardware ans software information from winNodes every 2 hours.

     * Scanning vulnerabilities on all hosts (nodes, winNodes and outsiders) (2 months).


(12) System is now installed and configured. So, as an administrator, we can use Servers to get hardware and software information from nodes and winNodes, to monitor status of hosts (nodes, winNodes and outsiders) and to get graphical performance information about nodes (only connecting from IPs: 172.16.40.144 or 172.16.40.176). Connecting to 'https://monitortfm.eps.ua.es' we have a web menu with access to:

     * Nagios Server 'https://monitortfm.eps.ua.es/nagios' (user: 'admin' password: 'jjzubi') -> Monitoring hosts of our working subnet '172.16.40.0/24'.

     * Munin Server 'https://monitortfm.eps.ua.es/munin' (user: 'admin' password: 'jjzubi') -> Watching performance information about nodes.

     * Wiki Server 'https://monitortfm.eps.ua.es/wiki' (user: 'admin' password: 'jjzubi') -> With a Hardware/Software/Security inventory about nodes and winNodes

     * Web Server (PhpMyAdmin) 'https://monitortfm.eps.ua.es/phpmyadmin' ( mysql user: 'inventory' password:'jjzubi') -> To manage Mysql Database or doing SQL queries to get information directly from 'inventory' database.

     * Web Server (PHP & Angularjs Applications) 'https://monitortfm.eps.ua.es/web' (user: 'admin' password:'jjzubi') -> To analize PHP & Angularjs Applications and use them as templates to make a complete and customized application. See FAQ(10) for details.

     * Openvas Server 'https://monitortfm.eps.ua.es:9392' (user: 'admin' password: 'jjzubi', both defined in extra variables file '/etc/ansible/config_files/extra.conf') -> To manage vulnerabilities checks, generate reports and watch results.

     * Documentation 'https://monitortfm.eps.ua.es/help'


(13) In the same 'Control Menu' we have configured System, we can manage System: reconfigure, define extra parameters, watching errors, executing jobs, seeing configuration, etc. See MENU help file for details.
     

######################################################
